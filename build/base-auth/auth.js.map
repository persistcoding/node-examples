{"version":3,"sources":["../../source/base-auth/auth.js"],"names":["req","TypeError","header","getAuthorization","parse","headers","authorization","CREDENTIALS_REGEXP","USER_PASS_REGEXP","string","undefined","match","exec","userPass","decodeBase64","Credentials","name","pass","str","result","Buffer","toString"],"mappings":";;;;;;kBAAe,UAAUA,GAAV,EAAe;;AAE5B,MAAG,CAACA,GAAJ,EAAS;AACP,UAAM,IAAIC,SAAJ,CAAc,0BAAd,CAAN;AACD;AACD,MAAG,OAAOD,GAAP,KAAe,QAAlB,EAA4B;AAC1B,UAAM,IAAIC,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAED;AACA,QAAMC,SAASC,iBAAiBH,IAAIA,GAAJ,IAAWA,GAA5B,CAAf;;AAEA;AACA,SAAOI,MAAMF,MAAN,CAAP;AACD,C;;AAGD,SAASC,gBAAT,CAA0BH,GAA1B,EAA+B;AAC7B,MAAG,CAACA,IAAIK,OAAL,IAAgB,OAAOL,IAAIK,OAAX,KAAsB,QAAzC,EAAmD;AACjD,UAAM,IAAIJ,SAAJ,CAAc,mDAAd,CAAN;AACD;;AAED;AACA;;AAEA,SAAOD,IAAIK,OAAJ,CAAYC,aAAnB;AACD;;AAED;;;;;;;;AAQA,MAAMC,qBAAqB,wDAA3B;;AAEA;;;;;;;;;AASA,IAAIC,mBAAmB,gBAAvB;;AAEA,SAASJ,KAAT,CAAgBK,MAAhB,EAAwB;AACtB,MAAG,OAAOA,MAAP,IAAgB,QAAnB,EAA6B;AAC3B,WAAOC,SAAP;AACD;AACD;AACA,QAAMC,QAAQJ,mBAAmBK,IAAnB,CAAwBH,MAAxB,CAAd;AACA,MAAG,CAACE,KAAJ,EAAW;AACT,WAAOD,SAAP;AACD;;AAED;AACA,QAAMG,WAAWL,iBAAiBI,IAAjB,CAAsBE,aAAaH,MAAM,CAAN,CAAb,CAAtB,CAAjB;;AAEA,MAAG,CAACE,QAAJ,EAAc;AACZ,WAAOH,SAAP;AACD;;AAED,SAAO,IAAIK,WAAJ,CAAgBF,SAAS,CAAT,CAAhB,EAA6BA,SAAS,CAAT,CAA7B,CAAP;AACD;;AAED,SAASE,WAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAChC,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD;;AAGD,SAASH,YAAT,CAAsBI,GAAtB,EAA2B;AACzB,QAAMC,SAAS,IAAIC,MAAJ,CAAWF,GAAX,EAAgB,QAAhB,EAA0BG,QAA1B,EAAf;;AAEA;AACA;AACA,SAAOF,MAAP;AACD","file":"auth.js","sourcesContent":["export default function (req) {\n\n  if(!req) {\n    throw new TypeError('argument req is required')\n  }\n  if(typeof req !== 'object') {\n    throw new TypeError('argument req is required to be an object')\n  }\n\n  // get header\n  const header = getAuthorization(req.req || req)\n\n  // parse header\n  return parse(header);\n}\n\n\nfunction getAuthorization(req) {\n  if(!req.headers || typeof req.headers !=='object') {\n    throw new TypeError('argument req is required to have headers property')\n  }\n\n  // console.log('req.headers.authorization')\n  // console.log(req.headers.authorization)\n\n  return req.headers.authorization\n}\n\n/**\n * RegExp for basic auth credentials\n *\n * credentials = auth-scheme 1*SP token68\n * auth-scheme = \"Basic\" ; case insensitive\n * token68     = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n * @private\n */\nconst CREDENTIALS_REGEXP = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9._~+/-]+=*) *$/\n\n/**\n * RegExp for basic auth user/pass\n *\n * user-pass   = userid \":\" password\n * userid      = *<TEXT excluding \":\">\n * password    = *TEXT\n * @private\n */\n\nvar USER_PASS_REGEXP = /^([^:]*):(.*)$/\n\nfunction parse (string) {\n  if(typeof string !=\"string\") {\n    return undefined\n  }\n  // parse header\n  const match = CREDENTIALS_REGEXP.exec(string)\n  if(!match) {\n    return undefined\n  }\n\n  // decode user pass\n  const userPass = USER_PASS_REGEXP.exec(decodeBase64(match[1]))\n\n  if(!userPass) {\n    return undefined\n  }\n\n  return new Credentials(userPass[1], userPass[2]);\n}\n\nfunction Credentials (name, pass) {\n  this.name = name\n  this.pass = pass\n}\n\n\nfunction decodeBase64(str) {\n  const result = new Buffer(str, 'base64').toString()\n\n  // console.log('decodeBase64')\n  // console.log(result)\n  return result\n}\n"]}